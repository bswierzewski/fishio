using Fishio.Application;
using Fishio.Infrastructure;
using Fishio.API;
using Fishio.API.Middleware;
using Fishio.API.Endpoints;
using Fishio.Infrastructure.Persistence;

var builder = WebApplication.CreateBuilder(args);

// Add services from all layers
builder.Services.AddApplication();
builder.Services.AddInfrastructure(builder.Configuration);
builder.Services.AddAPI(builder.Configuration, builder.Environment);

var app = builder.Build();


await app.InitializeDatabaseAsync();

// Configure the HTTP request pipeline
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "Fishio API V1");
        c.RoutePrefix = string.Empty; // Serve Swagger UI at the root
    });

    app.UseCors(); // Uses default policy configured in AddAPI
}

// Configure comprehensive and layered error handling.
// The order of these middleware components is crucial for them to work correctly together.

// 1. UseExceptionHandler: This is the first layer, designed to catch unhandled exceptions
// that are thrown from the application logic (e.g., a NotFoundException from a MediatR handler).
// It passes the exception to the registered IExceptionHandler implementation (our CustomExceptionHandler),
// which then crafts a specific, detailed ProblemDetails response.
app.UseExceptionHandler();

// 2. UseStatusCodePages: This is the second layer, which handles HTTP error status codes (4xx-5xx)
// for responses that have no body. This is critical for errors generated by other middleware
// before the application logic is executed, such as Authentication (401) or Authorization (403).
// It intercepts these empty responses and generates a standard ProblemDetails body for them,
// ensuring that all error responses have a consistent, machine-readable format.
app.UseStatusCodePages();

app.UseAuthentication();
app.UseMiddleware<UserSyncMiddleware>(); // Synchronize user data with database after authentication
app.UseAuthorization();

// Health check endpoint
app.MapGet("/api/health", () =>
{
    return Results.Ok(new { Status = "Healthy", Timestamp = DateTime.UtcNow });
})
.WithName("HealthCheck")
.WithOpenApi();

// Map minimal API endpoints
app.MapUserApi();

app.Run();
