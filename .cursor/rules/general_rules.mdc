---
description: 
globs: 
alwaysApply: true
---
# Important: try to fix things at the cause, not the symptom.
# Important: Be very detailed with summarization and do not miss out things that are important.

# üé£ Fishio - General Application Rules for Cursor

**Objective:** This document provides general context and overarching principles for the development of the Fishio application. It aims to ensure that Cursor understands the main project goals, key technologies, and the overall approach to software development, for both the backend (API) and frontend (Client) parts.

## üéØ 1. General Project Context

1.  **Application Name:** Fishio
2.  **Main Goal:**
    *   To create an intuitive web platform (optimized for mobile devices) for anglers and fishing competition organizers.
    *   To facilitate the organization of and participation in competitions.
3.  **Key Functionalities (MVP+ Vision):**
    *   Competition Management (creating, browsing, joining, managing participants and roles).
    *   Catch Logging (within competitions by a Judge).
    *   Public Competition Results Page (dynamic, with rankings).
4.  **Target Users:**
    *   Anglers (at various skill levels).
    *   Fishing competition organizers.
    *   Potentially: Fishing associations (in future development).

## üß≠ 2. Overarching Development Principles

1.  **Consistency:**
    *   Maintain consistency with existing code, design patterns, and naming conventions within the respective project (API or Client).
    *   New functionalities should integrate naturally with the rest of the application.
2.  **Code Readability and Maintainability:**
    *   Write code that is easy to understand, modify, and extend.
    *   Use clear naming for variables, functions, and classes.
    *   Add comments where the logic is not obvious.
3.  **Modularization and Reusability:**
    *   Design components (frontend) and services/modules (backend) in a modular way.
    *   Strive for code reusability where it makes sense to avoid duplication.
4.  **User Experience (UX):**
    *   The priority is an intuitive and user-friendly interface, especially on mobile devices (Mobile-First).
    *   The application should be responsive and perform smoothly.
5.  **Testability:**
    *   Write code with testability in mind. New, key functionalities should be covered by appropriate tests (unit, integration, E2E ‚Äì depending on the layer and feasibility).
6.  **Security:**
    *   Pay attention to basic web application security principles (input validation, authorization, protection against common attacks).
7.  **Performance:**
    *   Optimize database queries and client-side operations to ensure good application performance.
    *   Pay attention to frontend bundle sizes and load times.

## üåç 3. Language and Localization Rules

**CRITICAL RULE: All user-facing error messages and validation messages MUST be in Polish. All logging and technical messages MUST remain in English.**

1.  **User-Facing Messages (Polish):**
    *   All error messages displayed to users must be in Polish.
    *   All validation messages must be in Polish.
    *   All toast notifications and user feedback must be in Polish.
    *   All form field labels and help text must be in Polish.

2.  **Technical/Logging Messages (English):**
    *   All logging messages must remain in English for technical debugging.
    *   All console.log, console.error messages must be in English.
    *   All technical exception details for developers must be in English.
    *   All code comments should be in English.

3.  **Implementation Guidelines:**
    *   When implementing error handling, separate user-facing messages (Polish) from technical logging (English).
    *   Use consistent Polish terminology across the application.
    *   Maintain English for all developer-facing documentation and technical details.

## üõ†Ô∏è 4. Key Technologies (General Overview)

1.  **Backend (API):**
    *   **.NET 9 (Minimal API)**
    *   **Architecture:** Clean Architecture
    *   **ORM:** Entity Framework Core
    *   **Database:** PostgreSQL
    *   **Patterns:** CQRS with MediatR
2.  **Frontend (Client):**
    *   **Framework:** Next.js (App Router)
    *   **Language:** TypeScript
    *   **UI:** React, shadcn/ui, TailwindCSS
    *   **State Management:** React Query (server state), Zustand (global client state)
    *   **Forms:** React Hook Form
3.  **Authentication (Shared):**
    *   **Clerk**

## üí° 5. General Instructions for Cursor

1.  **Context Differentiation:** Always try to understand whether the current task concerns the **backend (API)** or the **frontend (Client)**. This affects the technologies, patterns, and conventions to be used.
2.  **Using Specific Rules:**
    *   If more detailed rule files are available for the API (`fishio_backend_rules.mdc`) or Client (`fishio_client_rules.mdc`), refer to them for precise implementation guidelines within that layer.
3.  **Implementing New Features (End-to-End):**
    *   When adding a new feature that spans both layers, typically the **API contract** (endpoints, DTOs in the backend) is designed and implemented first.
    *   Then, the **consumption of this API** and the corresponding user interface are implemented on the client-side.
4.  **TypeScript:** Both the frontend and the business logic in the backend (though written in C#) should strive for strong typing and clarity of data contracts.
5.  **Iterative Development:** The application is developed iteratively. Focus on delivering working pieces of functionality according to the MVP/MVP+ scope, and then expand them with more advanced options.
6.  **Mobile-First:** Remember that optimization for mobile devices is crucial for the frontend.

---
